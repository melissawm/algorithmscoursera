# Karatsuba Multiplication

def recursive_multiplication(x, y):
    if len(x) == 1 and len(y) == 1:
        return str(int(x)*int(y))

def string_add(s, r):

    lens = len(s)
    lenr = len(r)

    carry = 0
    result = ""
    for i in range(max(lens, lenr)-1, 0, -1):
        print(i)
        partial = str(int(s[i])+int(r[i])+carry)
        if len(partial) == 2:
            carry = partial[0]
        else:
            carry = 0
        result = partial + result
    return result

def string_subtract(s, r):

    lens = len(s)
    lenr = len(r)

    carry = 0
    result = ""
    for i in range(max(lens, lenr)-1, 0, -1):
        if int(s[i])-carry >= int(r[i]):
            partial = str(int(s[i])-carry-int(r[i]))
            carry = 0
        else:
            partial = str(10+(int(s[i])-carry)-int(r[i]))
            carry = 1
        result = partial + result
    return result

if __name__ == "__main__":
    pi  = "31"#41592653589793238462643383279502884197169399375105820974944592"
    exp = "27"#18281828459045235360287471352662497757247093699959574966967627"

    # Procedure:
    # 1. Split each n-digit number into 2 n/2-digit numbers

    n = len(pi)
    if n%2 != 0:
        half = int((n+1)/2)
    else:
        half = int(n/2)
    
        a = pi[0:half]
        b = pi[half:]

        c = exp[0:half]
        d = exp[half:]

        print("pi = {}".format(pi))
        print("exp = {}".format(exp))

        print("a = {}".format(a))
        print("b = {}".format(b))
        print("c = {}".format(c))
        print("d = {}".format(d))

        # 2. Recursively compute a*c
        
        ac = recursive_multiplication(a, c)

        print("ac = {}".format(ac))

        # 3. Recursively compute b*d
        
        bd = recursive_multiplication(b, d)

        print("bd = {}".format(bd))

        # 4. Recursively compute (a+b)*(c+d) = ac + (ad + bc) + bd

        aplusb = string_add(a, b)
        print("a+b = {}".format(aplusb))
              
        cplusd = string_add(c, d)
        print

        bigproduct = recursive_multiplication(aplusb, cplusd)

        # 5. Gauss' trick: (ad+bc) = (ad+bc) - a*c - b*d

        middleproduct = string_subtract(bigproduct, string_add(ac, bd))

        # Finally:
        finalproduct = (10**n)*ac + 10**(n-half)*middleproduct + bd

